<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Registro de Emociones</title>
  <style>
    /* Estilos generales y layout */
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f0f0f0;
    }
    .container {
      width: 90%;
      margin: 20px auto;
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      justify-content: center;
    }
    .section {
      background-color: #fff;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      flex: 1 1 300px;
      max-width: 400px;
    }
    .section h2 {
      margin-top: 0;
      text-align: center;
    }
    /* Cronómetro */
    #timer-display {
      font-size: 2em;
      text-align: center;
      margin-bottom: 10px;
    }
    button {
      padding: 10px 15px;
      margin: 5px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1em;
    }
    /* Botones de emociones */
    #emotion-buttons {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
    }
    .emotion-btn {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      border: none;
      font-size: 1.5em;
      margin: 5px;
      transition: transform 0.2s;
    }
    .emotion-btn:active, .emotion-btn.clicked {
      transform: scale(0.9);
    }
    /* Registro de emociones */
    #record-list {
      list-style-type: none;
      padding: 0;
      max-height: 300px;
      overflow-y: auto;
    }
    #record-list li {
      padding: 5px;
      border-bottom: 1px solid #ddd;
      font-size: 0.9em;
    }
    /* Gráfica en estadísticas */
    #stats-chart {
      background-color: #fafafa;
      border: 1px solid #ccc;
      margin-bottom: 10px;
    }
    /* Responsividad */
    @media (max-width: 768px) {
      .container {
        flex-direction: column;
        align-items: center;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Sección para que el usuario ingrese su identificador (nombre o ID) -->
    <div class="section">
      <h2>Identificación</h2>
      <input type="text" id="user-id" placeholder="Tu nombre o ID" style="width: 100%; padding: 8px;"/>
    </div>

    <!-- Sección del cronómetro -->
    <div class="section">
      <h2>Cronómetro</h2>
      <div id="timer-display">00:00:00</div>
      <div style="text-align: center;">
        <button id="start-btn" style="background-color: #4CAF50; color: white;">Iniciar</button>
        <button id="pause-btn" style="background-color: #f0ad4e; color: white;">Pausar</button>
        <button id="reset-timer-btn" style="background-color: #d9534f; color: white;">Resetear</button>
      </div>
      <div style="text-align: center; margin-top: 10px;">
        <input type="text" id="manual-time" placeholder="mm:ss o hh:mm:ss" style="width: 60%; padding: 5px;"/>
        <button id="set-time-btn" style="background-color: #5bc0de; color: white;">Establecer tiempo</button>
      </div>
    </div>

    <!-- Sección de selección de emociones -->
    <div class="section">
      <h2>Selecciona tu emoción</h2>
      <div id="emotion-buttons">
         <button class="emotion-btn" data-emotion="amor" style="background-color: pink;" title="Amor / Ternura">
           <span role="img" aria-label="amor">😍</span>
         </button>
         <button class="emotion-btn" data-emotion="risa" style="background-color: yellow;" title="Risa / Diversión">
           <span role="img" aria-label="risa">😄</span>
         </button>
         <button class="emotion-btn" data-emotion="miedo" style="background-color: #555; color: white;" title="Miedo">
           <span role="img" aria-label="miedo">😱</span>
         </button>
         <button class="emotion-btn" data-emotion="asombro" style="background-color: purple; color: white;" title="Asombro / Sorpresa">
           <span role="img" aria-label="asombro">😮</span>
         </button>
         <button class="emotion-btn" data-emotion="disgusto" style="background-color: green; color: white;" title="Disgusto / Desagrado">
           <span role="img" aria-label="disgusto">🤢</span>
         </button>
         <button class="emotion-btn" data-emotion="tristeza" style="background-color: blue; color: white;" title="Tristeza">
           <span role="img" aria-label="tristeza">😢</span>
         </button>
         <button class="emotion-btn" data-emotion="sueño" style="background-color: darkgray;" title="Sueño / Aburrimiento">
           <span role="img" aria-label="sueño">😴</span>
         </button>
      </div>
    </div>

    <!-- Sección del registro de emociones -->
    <div class="section">
      <h2>Registro de Emociones</h2>
      <ul id="record-list"></ul>
      <div style="text-align: center; margin-top: 10px;">
        <button id="export-btn" style="background-color: #5cb85c; color: white;">Exportar datos (JSON)</button>
        <button id="reset-data-btn" style="background-color: #d9534f; color: white;">Restablecer datos</button>
      </div>
    </div>

    <!-- Sección de estadísticas -->
    <div class="section">
      <h2>Estadísticas</h2>
      <div style="text-align: center;">
        <button id="toggle-stats-btn" style="background-color: #337ab7; color: white;">Mostrar/Ocultar Estadísticas</button>
      </div>
      <div id="stats-container" style="display: none; margin-top: 10px;">
         <canvas id="stats-chart" width="400" height="200"></canvas>
         <div id="emotion-counts"></div>
      </div>
    </div>
  </div>

  <script>
    /***** VARIABLES GLOBALES *****/
    let timer = {
      seconds: 0,
      interval: null
    };
    let records = [];

    // Si hay datos en localStorage, se cargan
    if(localStorage.getItem('emotionRecords')) {
      records = JSON.parse(localStorage.getItem('emotionRecords'));
      updateRecordList();
    }

    /***** FUNCIONES DEL CRONÓMETRO *****/
    // Actualiza la visualización del cronómetro
    function updateTimerDisplay() {
      const display = document.getElementById('timer-display');
      display.textContent = formatTime(timer.seconds);
    }

    // Convierte segundos a formato hh:mm:ss
    function formatTime(sec) {
      let hours = Math.floor(sec / 3600);
      let minutes = Math.floor((sec % 3600) / 60);
      let seconds = sec % 60;
      return (
        (hours < 10 ? "0" + hours : hours) + ":" +
        (minutes < 10 ? "0" + minutes : minutes) + ":" +
        (seconds < 10 ? "0" + seconds : seconds)
      );
    }

    // Inicia el cronómetro
    function startTimer() {
      if (!timer.interval) {
        timer.interval = setInterval(() => {
          timer.seconds++;
          updateTimerDisplay();
        }, 1000);
      }
    }

    // Pausa el cronómetro
    function pauseTimer() {
      if (timer.interval) {
        clearInterval(timer.interval);
        timer.interval = null;
      }
    }

    // Resetea el cronómetro
    function resetTimer() {
      pauseTimer();
      timer.seconds = 0;
      updateTimerDisplay();
    }

    // Permite establecer manualmente el tiempo (mm:ss o hh:mm:ss)
    function setManualTime() {
      const input = document.getElementById('manual-time').value.trim();
      const parts = input.split(':').map(part => parseInt(part, 10));
      let totalSeconds = 0;
      if(parts.length === 2) { // mm:ss
        totalSeconds = parts[0] * 60 + parts[1];
      } else if(parts.length === 3) { // hh:mm:ss
        totalSeconds = parts[0] * 3600 + parts[1] * 60 + parts[2];
      } else {
        alert("Formato incorrecto. Usa mm:ss o hh:mm:ss");
        return;
      }
      timer.seconds = totalSeconds;
      updateTimerDisplay();
    }

    /***** REGISTRO DE EMOCIONES *****/
    // Registra la emoción seleccionada junto con el tiempo actual
    function registerEmotion(emotion) {
      const userId = document.getElementById('user-id').value || "Anónimo";
      const record = {
        user: userId,
        emotion: emotion,
        time: timer.seconds,
        formattedTime: formatTime(timer.seconds),
        timestamp: new Date().toISOString()
      };
      records.push(record);
      // Guarda los datos en localStorage
      localStorage.setItem('emotionRecords', JSON.stringify(records));
      updateRecordList();
      updateStatistics();
    }

    // Actualiza la lista de registros en la interfaz
    function updateRecordList() {
      const list = document.getElementById('record-list');
      list.innerHTML = '';
      // Se ordena cronológicamente
      records.sort((a, b) => a.time - b.time);
      records.forEach(record => {
        const li = document.createElement('li');
        li.textContent = `[${record.formattedTime}] ${record.user}: ${record.emotion}`;
        list.appendChild(li);
      });
    }

    // Exporta los datos en formato JSON descargable
    function exportData() {
      const dataStr = JSON.stringify(records, null, 2);
      const blob = new Blob([dataStr], { type: "application/json" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = "emotion_records.json";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
    }

    // Restablece (limpia) los datos de registros
    function resetData() {
      if(confirm("¿Estás seguro de que deseas restablecer todos los datos?")) {
        records = [];
        localStorage.removeItem('emotionRecords');
        updateRecordList();
        updateStatistics();
      }
    }

    /***** ESTADÍSTICAS *****/
    // Actualiza la visualización de estadísticas: conteos y gráfica de barras
    function updateStatistics() {
      // Definición de categorías y colores asociados
      const categories = {
        amor: { label: "Amor / Ternura", color: "pink" },
        risa: { label: "Risa / Diversión", color: "yellow" },
        miedo: { label: "Miedo", color: "#555" },
        asombro: { label: "Asombro / Sorpresa", color: "purple" },
        disgusto: { label: "Disgusto / Desagrado", color: "green" },
        tristeza: { label: "Tristeza", color: "blue" },
        sueño: { label: "Sueño / Aburrimiento", color: "darkgray" }
      };

      // Calcular la cantidad de ocurrencias por cada emoción
      const counts = {};
      for (let key in categories) {
        counts[key] = 0;
      }
      records.forEach(record => {
        if(counts.hasOwnProperty(record.emotion)) {
          counts[record.emotion]++;
        }
      });

      // Actualizar la lista de conteos
      const countsDiv = document.getElementById('emotion-counts');
      countsDiv.innerHTML = '<h3>Conteos por emoción:</h3>';
      for (let key in categories) {
        countsDiv.innerHTML += `<p style="color:${categories[key].color}">${categories[key].label}: ${counts[key]}</p>`;
      }

      // Dibujar gráfica de barras en el canvas
      const canvas = document.getElementById('stats-chart');
      const ctx = canvas.getContext('2d');
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Parámetros de la gráfica
      const padding = 40;
      const chartWidth = canvas.width - padding * 2;
      const chartHeight = canvas.height - padding * 2;
      const keys = Object.keys(categories);
      const barWidth = chartWidth / keys.length - 20;
      const maxCount = Math.max(...Object.values(counts), 5); // Se establece un mínimo para la escala

      // Dibujar ejes
      ctx.beginPath();
      ctx.moveTo(padding, padding);
      ctx.lineTo(padding, canvas.height - padding);
      ctx.lineTo(canvas.width - padding, canvas.height - padding);
      ctx.stroke();

      // Dibujar cada barra
      keys.forEach((key, index) => {
        const x = padding + index * (barWidth + 20) + 10;
        const barHeight = (counts[key] / maxCount) * chartHeight;
        const y = canvas.height - padding - barHeight;
        ctx.fillStyle = categories[key].color;
        ctx.fillRect(x, y, barWidth, barHeight);

        // Etiqueta debajo de cada barra
        ctx.fillStyle = "black";
        ctx.font = "12px Arial";
        ctx.textAlign = "center";
        ctx.fillText(key, x + barWidth / 2, canvas.height - padding + 15);
      });
    }

    /***** EVENTOS *****/
    // Cronómetro
    document.getElementById('start-btn').addEventListener('click', startTimer);
    document.getElementById('pause-btn').addEventListener('click', pauseTimer);
    document.getElementById('reset-timer-btn').addEventListener('click', resetTimer);
    document.getElementById('set-time-btn').addEventListener('click', setManualTime);

    // Registro y gestión de datos
    document.getElementById('export-btn').addEventListener('click', exportData);
    document.getElementById('reset-data-btn').addEventListener('click', resetData);

    // Mostrar/Ocultar estadísticas
    document.getElementById('toggle-stats-btn').addEventListener('click', function(){
      const statsContainer = document.getElementById('stats-container');
      if(statsContainer.style.display === "none") {
        statsContainer.style.display = "block";
        updateStatistics();
      } else {
        statsContainer.style.display = "none";
      }
    });

    // Asignar evento a cada botón de emoción
    document.querySelectorAll('.emotion-btn').forEach(button => {
      button.addEventListener('click', function(){
        // Animación simple: se añade la clase y luego se remueve
        button.classList.add('clicked');
        setTimeout(() => {
          button.classList.remove('clicked');
        }, 200);
        // Registrar la emoción con el tiempo actual
        const emotion = this.getAttribute('data-emotion');
        registerEmotion(emotion);
      });
    });

    // Inicializa la visualización del cronómetro al cargar la página
    updateTimerDisplay();
  </script>
</body>
</html>
